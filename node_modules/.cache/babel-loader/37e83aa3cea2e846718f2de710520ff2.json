{"ast":null,"code":"var _jsxFileName = \"/home/pri/Desktop/react/FoodOrder/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; //state is the last state of the function\n//action is the one which we called while dispatching\n\nconst CartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItem;\n    let updatedItems;\n\n    if (existingCartItem) {\n      updatedItems = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    console.log(updatedItems);\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\n_c = CartReducer;\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(CartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartProvider, \"2SyrzIf5h4zAVB5yWzJ1q/dSUlI=\");\n\n_c2 = CartProvider;\nexport default CartProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CartReducer\");\n$RefreshReg$(_c2, \"CartProvider\");","map":{"version":3,"sources":["/home/pri/Desktop/react/FoodOrder/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","CartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItem","updatedItems","concat","console","log","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAAQA,UAAR,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAG,EADa;AAErBC,EAAAA,WAAW,EAAG;AAFO,CAAzB,C,CAKA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAClC,MAAGA,MAAM,CAACC,IAAP,KAAc,KAAjB,EAAuB;AACnB,UAAMC,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAkBJ,MAAM,CAACG,IAAP,CAAYE,MAA7E;AAEA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAAsBJ,IAAI,IAAIA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EAAtD,CAA9B;AACA,UAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAAzB;AAEA,QAAII,WAAJ;AACA,QAAIC,YAAJ;;AAEA,QAAGF,gBAAH,EAAoB;AAChBE,MAAAA,YAAY,GAAG,EACX,GAAGF,gBADQ;AAEXJ,QAAAA,MAAM,EAAGI,gBAAgB,CAACJ,MAAjB,GAAwBL,MAAM,CAACG,IAAP,CAAYE;AAFlC,OAAf;AAIAM,MAAAA,YAAY,GAAG,CAAC,GAAGZ,KAAK,CAACH,KAAV,CAAf;AACAe,MAAAA,YAAY,CAACL,qBAAD,CAAZ,GAAsCI,WAAtC;AACH,KAPD,MAOK;AACDC,MAAAA,YAAY,GAAGZ,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACG,IAA1B,CAAf;AACH;;AACDU,IAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACA,WAAO;AAACf,MAAAA,KAAK,EAAGe,YAAT;AAAsBd,MAAAA,WAAW,EAAGK;AAApC,KAAP;AACH;;AACD,SAAOP,gBAAP;AACH,CAxBD;;KAAMG,W;;AA0BN,MAAMiB,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAC1B,QAAM,CAACC,SAAD,EAAWC,kBAAX,IAAiCzB,UAAU,CAACK,WAAD,EAAaH,gBAAb,CAAjD;;AAEA,QAAMwB,oBAAoB,GAAIhB,IAAD,IAAU;AACnCe,IAAAA,kBAAkB,CAAC;AAACjB,MAAAA,IAAI,EAAG,KAAR;AAAeE,MAAAA,IAAI,EAACA;AAApB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMiB,yBAAyB,GAAIZ,EAAD,IAAQ;AACtCU,IAAAA,kBAAkB,CAAC;AAACjB,MAAAA,IAAI,EAAG,QAAR;AAAkBO,MAAAA,EAAE,EAACA;AAArB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMa,WAAW,GAAG;AAChBzB,IAAAA,KAAK,EAAGqB,SAAS,CAACrB,KADF;AAEhBC,IAAAA,WAAW,EAAGoB,SAAS,CAACpB,WAFR;AAGhByB,IAAAA,OAAO,EAAGH,oBAHM;AAIhBI,IAAAA,UAAU,EAAGH;AAJG,GAApB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACFL,KAAK,CAACQ;AADJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CArBD;;GAAMT,Y;;MAAAA,Y;AAuBN,eAAeA,YAAf","sourcesContent":["import {useReducer} from \"react\"\nimport CartContext from \"./cart-context\"\n\nconst defaultCartState = {\n    items : [],\n    totalAmount : 0\n}\n\n//state is the last state of the function\n//action is the one which we called while dispatching\nconst CartReducer = (state,action) => {\n    if(action.type==='ADD'){\n        const updatedTotalAmount = state.totalAmount + action.item.price*action.item.amount;\n\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n        const existingCartItem = state.items[existingCartItemIndex];\n\n        let updatedItem;\n        let updatedItems;\n        \n        if(existingCartItem){\n            updatedItems = {\n                ...existingCartItem,\n                amount : existingCartItem.amount+action.item.amount\n            };\n            updatedItems = [...state.items];\n            updatedItems[existingCartItemIndex] = updatedItem;\n        }else{\n            updatedItems = state.items.concat(action.item);\n        }\n        console.log(updatedItems);\n        return({items : updatedItems,totalAmount : updatedTotalAmount});\n    }\n    return defaultCartState;\n}\n\nconst CartProvider = props => {\n    const [cartState,dispatchCartAction] = useReducer(CartReducer,defaultCartState);\n\n    const addItemToCartHandler = (item) => {\n        dispatchCartAction({type : 'ADD', item:item})\n    }\n\n    const removeItemFromCartHandler = (id) => {\n        dispatchCartAction({type : 'REMOVE', id:id})\n    }\n\n    const cartContext = {\n        items : cartState.items,\n        totalAmount : cartState.totalAmount,\n        addItem : addItemToCartHandler,\n        removeItem : removeItemFromCartHandler \n    }; \n\n    return <CartContext.Provider value={cartContext}>\n        {props.children}\n    </CartContext.Provider>\n}\n\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}